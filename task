def count_inversions(arr):
    def merge_and_count(left, right):
        merged = []
        i = j = inversions = 0
        
        while i < len(left) and j < len(right):
            if left[i] <= right[j]:
                merged.append(left[i])
                i += 1
            else:
                merged.append(right[j])
                inversions += len(left) - i  
                j += 1
        
        merged.extend(left[i:])
        merged.extend(right[j:])
        return merged, inversions
    
    def merge_sort(arr):
        if len(arr) <= 1:
            return arr, 0
        
        mid = len(arr) // 2
        left, left_inv = merge_sort(arr[:mid])
        right, right_inv = merge_sort(arr[mid:])
        merged, merge_inv = merge_and_count(left, right)
        
        return merged, left_inv + right_inv + merge_inv
    
    _, total_inversions = merge_sort(arr)
    return total_inversions

# Example usage
arr = [8, 4, 2, 1]
print("Total inversions:", count_inversions(arr))
